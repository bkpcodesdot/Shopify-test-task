<div class="custom-product-grid page-width" style="padding:90px 0;">
  
  <!-- Section Heading -->
  {% if section.settings.heading != blank %}
    <h2 class="custom-product-grid__heading">{{ section.settings.heading }}</h2>
  {% endif %}

  <!-- Product Grid -->
  <div class="custom-product-grid__wrapper">
    {% for block in section.blocks %}
      {% assign product = all_products[block.settings.product] %}
      {% if product %}
        <div class="custom-product-grid__item">
          <div class="custom-product-grid__image-wrapper">
            
            <!-- Product Image -->
            <img 
              src="{{ product.featured_image | image_url: width: 600 }}" 
              alt="{{ product.title }}" 
              class="custom-product-grid__image"
              width=""
              height=""
            >
            
            <!-- Plus Icon (opens popup) -->
            <div 
              class="custom-product-grid__icon" 
              style="top: {{ block.settings.icon_top }}%; left: {{ block.settings.icon_left }}%;" 
              data-product-handle="{{ product.handle }}">
              +
            </div>
          
          </div>
        </div>
      {% endif %}
    {% endfor %}
  </div>
</div>

<!-- Product Modal -->
<div id="productModal" class="custom-product-modal">
  <div class="custom-product-modal__content">
    <button class="custom-product-modal__close">&times;</button>
    
    <div class="custom-product-modal__inner">
      <div class="custom-product-modal__image"></div>
      <div class="custom-product-modal__details"></div>
    </div>
        <div class="custom-product-variation-addtocart"></div>
  </div>
</div>

{% schema %}
{
  "name": "Custom Product Grid",
  "settings": [
    {
      "type": "text",
      "id": "heading",
      "label": "Section Heading",
      "default": "Tisso vison in the wild"
    }
  ],
  "blocks": [
    {
      "type": "product",
      "name": "Product",
      "settings": [
        {
          "type": "product",
          "id": "product",
          "label": "Select Product"
        },
        {
          "type": "range",
          "id": "icon_top",
          "min": 0,
          "max": 100,
          "step": 1,
          "unit": "%",
          "label": "Plus Icon Position (Top)",
          "default": 50
        },
        {
          "type": "range",
          "id": "icon_left",
          "min": 0,
          "max": 100,
          "step": 1,
          "unit": "%",
          "label": "Plus Icon Position (Left)",
          "default": 50
        }
      ]
    }
  ],
  "max_blocks": 6,
  "presets": [
    {
      "name": "Custom Product Grid",
      "category": "Products"
    }
  ]
}
{% endschema %}


{% javascript %}
document.addEventListener("DOMContentLoaded", function () {
  const modal = document.getElementById("productModal");
  const modalContentImage = modal.querySelector(".custom-product-modal__image");
  const modalContentDetails = modal.querySelector(".custom-product-modal__details");
  const modalVariationAddtocart = modal.querySelector(".custom-product-variation-addtocart");
  const closeBtn = modal.querySelector(".custom-product-modal__close");

  document.querySelectorAll(".custom-product-grid__icon").forEach(icon => {
    icon.addEventListener("click", function () {
      const handle = this.getAttribute("data-product-handle");

      // Fetch product data from Shopify
      fetch(`/products/${handle}.js`)
        .then(res => res.json())
        .then(product => {
          // Left side image
          modalContentImage.innerHTML = `<img src="${product.featured_image}" alt="${product.title}">`;

          // Extract unique Size + Color options
          const sizes = [...new Set(product.variants.map(v => v.option1))];
          const colors = [...new Set(product.variants.map(v => v.option2))];

          // Right side details
          modalContentDetails.innerHTML = `
            <h3 class="prd_title">${product.title}</h3>
            <p class="prd_price"><strong>${(product.price / 100).toFixed(2)} ${Shopify.currency.active}</strong></p>
            <div class="prd_description">${product.description}</div>`;

          // Variations UI
          modalVariationAddtocart.innerHTML = `
            <!-- Color Options -->
            <h4 class="color_variation cstm_variant">Color</h4>
            <div class="variant-options color-options">
              ${colors.map((color, idx) => `
                <div class="color-option ${idx === 0 ? 'active' : ''}" data-value="${color}">
                  <span class="color-label">${color}</span>
                  <span class="color-swatch" style="background-color:${color.toLowerCase()};"></span>
                </div>
              `).join('')}
            </div>

            <!-- Size Dropdown -->
            <h4 class="size_variation cstm_variant">Size</h4>
            <div class="size-options">
              <select class="size-select">
                <option value="">Choose your size</option>
                ${sizes.map(size => `<option value="${size}">${size}</option>`).join('')}
              </select>
            </div>

            <button class="add-to-cart">ADD TO CART →</button>
            <div class="cart-message" style="margin-top:10px; font-size:14px; display:none;"></div>
          `;

          // Handle color selection
          modalVariationAddtocart.querySelectorAll('.color-option').forEach(btn => {
            btn.addEventListener('click', () => {
              modalVariationAddtocart.querySelectorAll('.color-option').forEach(b => b.classList.remove('active'));
              btn.classList.add('active');
            });
          });

          // Handle add to cart
          modalVariationAddtocart.querySelector('.add-to-cart').addEventListener('click', () => {
            const selectedColor = modalVariationAddtocart.querySelector('.color-option.active')?.getAttribute('data-value');
            const selectedSize = modalVariationAddtocart.querySelector('.size-select').value;

            if (!selectedColor || !selectedSize) {
              alert("Please select both size and color.");
              return;
            }

            // Find matching variant
            const variant = product.variants.find(v => v.option1 === selectedSize && v.option2 === selectedColor);

            if (!variant) {
              alert("This combination is not available.");
              return;
            }
            // Add to cart request
            fetch('/cart/add.js', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
              },
              body: JSON.stringify({ id: variant.id, quantity: 1 })
            })
              .then(res => res.json())
              .then(data => {
                console.log("Added to cart:", data);

                // Show success message below button
                const msgBox = modalVariationAddtocart.querySelector(".cart-message");
                msgBox.style.display = "block";
                msgBox.style.color = "green";
                msgBox.innerHTML = `✅ Product added to cart. <a href="/cart" style="color:green; text-decoration:underline; font-weight:600;">View Cart</a>`;
              })
              .catch(err => {
                console.error("Error adding to cart:", err);
                alert("Something went wrong. Please try again.");
              });
          });

          modal.classList.add("active");
        });
    });
  });

  closeBtn.addEventListener("click", () => {
    modal.classList.remove("active");
  });

  modal.addEventListener("click", (e) => {
    if (e.target === modal) {
      modal.classList.remove("active");
    }
  });
});

{% endjavascript %}
